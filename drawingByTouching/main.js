// Generated by CoffeeScript 1.7.1
(function() {
  var DrawingApp;

  DrawingApp = {
    init: function() {
      this.mode = 'mouse';
      if ('ontouchstart' in window) {
        this.mode = 'touch';
      }
      if (this.mode === 'touch') {
        document.addEventListener('touchmove', function(e) {
          return e.preventDefault();
        }, false);
      }
      this.scaleFactor = window.devicePixelRatio || 1;
      return this.createCanvas();
    },
    createCanvas: function() {
      var canvas;
      canvas = document.createElement('canvas');
      canvas.width = window.innerWidth * this.scaleFactor;
      canvas.height = window.innerHeight * this.scaleFactor;
      document.body.appendChild(canvas);
      this.ctx = canvas.getContext('2d');
      this.ctx.strokeStyle = 'rgba(255,0,0,1)';
      this.ctx.lineWidth = 5 * this.scaleFactor;
      this.ctx.lineCap = 'round';
      if (this.mode === 'touch') {
        canvas.addEventListener('touchstart', this, false);
        canvas.addEventListener('touchmove', this, false);
        return canvas.addEventListener('touchcancel', this, false);
      } else {
        canvas.addEventListener('mousedown', this, false);
        return canvas.addEventListener('mouseup', this, false);
      }
    },
    handleEvent: function(event) {
      switch (event.type) {
        case 'touchstart':
          return this.touchStartHandler(event);
        case 'touchmove':
          return this.touchMoveHandler(event);
        case 'touchcancel':
          return this.touchCancelHandler(event);
        case 'mousedown':
          return this.mouseDownHandler(event);
        case 'mouseup':
          return this.mouseUpHandler(event);
        case 'mousemove':
          return this.mouseMoveHandler(event);
      }
    },
    touchStartHandler: function(e) {
      return this.ctx.moveTo(e.touches[0].pageX * this.scaleFactor, e.touches[0].pageY * this.scaleFactor);
    },
    touchMoveHandler: function(e) {
      this.ctx.lineTo(e.touches[0].pageX * this.scaleFactor, e.touches[0].pageY * this.scaleFactor);
      return this.ctx.stroke();
    },
    touchCancelHandler: (function(_this) {
      return function(e) {
        return alert('The application was paused');
      };
    })(this),
    mouseDownHandler: function(e) {
      this.ctx.moveTo(e.layerX * this.scaleFactor, e.layerY * this.scaleFactor);
      return e.target.addEventListener('mousemove', this, false);
    },
    mouseUpHandler: function(e) {
      return e.target.removeEventListener('mousemove', this, false);
    },
    mouseMoveHandler: function(e) {
      this.ctx.lineTo(e.layerX * this.scaleFactor, e.layerY * this.scaleFactor);
      return this.ctx.stroke();
    }
  };

  DrawingApp.init();

}).call(this);
